
pipeline {
    agent any
    options {
        timeout(time: 1, unit: 'HOURS')
        timestamps()
        disableConcurrentBuilds()
        buildDiscarder(logRotator(numToKeepStr: '20', artifactNumToKeepStr: '10', daysToKeepStr: '30'))
    }
     parameters {
        string(name: 'ITEMNAME', defaultValue: 'TEST', description: 'Item name')
        string(name: 'BRANCH', defaultValue: 'master', description: 'Branch name')
        string(name: 'NEXUS_ARTEFACT_URL', defaultValue: '192.168.100.75:8585', description: 'Nexus artifact URL')
        string(name: 'REPOSITORY_FRONTEND', defaultValue: 'ci-cd/frontend', description: 'Frontend repository')
        string(name: 'REPOSITORY_BACKEND', defaultValue: 'ci-cd/backend', description: 'Backend repository')
        booleanParam(name: 'CLEAN_ALL', defaultValue: false, description: 'Clean all images and containers')
        string(name: 'SCRIPT_PATH', defaultValue: 'Jenkinsfile.CI', description: 'Path to the Jenkins script')
    }

    environment {
        REPO_URL = "https://github.com/yismaili/ci-cd"
        BRANCH = "${params.BRANCH}"
        NEXUS_ARTEFACT_CREDENTIALS = "nexus-credentials-id"
        NEXUS_ARTEFACT_URL = "${params.NEXUS_ARTEFACT_URL}"
        GIT_CREDENTIALS_ID = "github-pat"
        REPOSITORY_FRONTEND = "${params.REPOSITORY_FRONTEND}"
        REPOSITORY_BACKEND = "${params.REPOSITORY_BACKEND}"
        IMAGES_TO_KEEP = "2"
        GIT_COMMIT_SHORT = sh(script: "git rev-parse --short ${GIT_COMMIT}", returnStdout: true).trim()
        ENV = "/var/lib/jenkins/workspace/env/"
        WORKSPACE = "/var/lib/jenkins/workspace"
        DOCKER_IMAGES_INFO = "${WORKSPACE}/docker-image-info"
    }

        stages {
            
            stage('Checkout') {
                steps {
                    script {
                        checkout([
                            $class: 'GitSCM',
                            branches: [[name: env.BRANCH]],
                            userRemoteConfigs: [[
                                url: env.REPO_URL,
                                credentialsId: env.GIT_CREDENTIALS_ID
                            ]]
                        ])
                    }
                }
            }

            stage('Setup') {
                steps {
                    script {
                        def jobName = currentBuild.fullDisplayName.split(' ')[0]
                        env.CUSTOMNAME = env.GIT_BRANCH.split("/")[1]
                        env.APPNAME = sh(script: 'basename -s .git ${GIT_URL}', returnStdout: true).trim()
                        targetFolderArray = env.GIT_BRANCH.split("/")
                        targetFolder = targetFolderArray[targetFolderArray.size() - 1]
                        currentBuild.displayName = "${CUSTOMNAME}/${env.GIT_COMMIT_SHORT}-${env.BUILD_NUMBER}/CI" 
                        sh """
                            cp ${env.ENV}.env ${env.WORKSPACE}/${jobName}/.env
                            mkdir -p ${env.DOCKER_IMAGES_INFO}
                            chown -R jenkins:jenkins ${env.DOCKER_IMAGES_INFO}
                            chown jenkins:jenkins ${env.ENV}
                        """
                        writeFile file: "${env.DOCKER_IMAGES_INFO}/docker-image-info.txt", text: "${env.GIT_COMMIT_SHORT}-${env.BUILD_NUMBER}"
                    }
                }
            }

            stage('Preparing Frontend') {
                steps {
                    script {
                        dir('frontend') {
                            def frontendTag = "${REPOSITORY_FRONTEND}:frontend-${GIT_COMMIT_SHORT}-${BUILD_NUMBER}"
                            sh """
                            echo "Preparing Frontend"
                            docker build -t ${frontendTag} .
                            """
                        }
                    }
                }
            }

            stage('Preparing Backend') {
                steps {
                    script {
                        dir('backend') {
                            def backendTag = "${REPOSITORY_BACKEND}:backend-${GIT_COMMIT_SHORT}-${BUILD_NUMBER}"
                            sh """
                            echo "Preparing Backend"
                            docker build -t ${backendTag} .
                            """
                        }
                    }
                }
            }

            stage('Test') {
                steps {
                    script {
                        sh 'echo ":/"'
                    }
                }
            }

            stage('Tag and Push Backend Image to Nexus') {
                steps {
                    script {
                        def backendTag = "${REPOSITORY_BACKEND}:backend-${env.GIT_COMMIT_SHORT}-${env.BUILD_NUMBER}"
                        def nexusBackendTag = "${NEXUS_ARTEFACT_URL}/ci-cd/backend:backend-${env.GIT_COMMIT_SHORT}-${env.BUILD_NUMBER}"

                        sh "docker tag ${backendTag} ${nexusBackendTag}"

                        withDockerRegistry([url: "http://${env.NEXUS_ARTEFACT_URL}", credentialsId: env.NEXUS_ARTEFACT_CREDENTIALS]) {
                            sh "docker push ${nexusBackendTag}"
                        }
                        sh "docker rmi ${nexusBackendTag}"
                    }
                }
            }

            stage('Tag and Push Frontend Image to Nexus') {
                steps {
                    script {
                        def frontendTag = "${REPOSITORY_FRONTEND}:frontend-${env.GIT_COMMIT_SHORT}-${env.BUILD_NUMBER}"
                        def nexusFrontendTag = "${NEXUS_ARTEFACT_URL}/ci-cd/frontend:frontend-${env.GIT_COMMIT_SHORT}-${env.BUILD_NUMBER}"

                        sh "docker tag ${frontendTag} ${nexusFrontendTag}"

                        withDockerRegistry([url: "http://${env.NEXUS_ARTEFACT_URL}", credentialsId: env.NEXUS_ARTEFACT_CREDENTIALS]) {
                            sh "docker push ${nexusFrontendTag}"
                        }
                        sh "docker rmi ${nexusFrontendTag}"
                    }
                }
            }

            stage('Remove Unused Docker Images') {
                steps {
                    script {
                        try {
                            
                            def backendTags = sh(script: "docker images --format '{{.Repository}}:{{.Tag}}' | grep '${REPOSITORY_BACKEND}' || true", returnStdout: true).trim().split('\n').findAll { it }
                            def frontendTags = sh(script: "docker images --format '{{.Repository}}:{{.Tag}}' | grep '${REPOSITORY_FRONTEND}' || true", returnStdout: true).trim().split('\n').findAll { it }
                            
                            if (params.CLEAN_ALL) {
                                sh "docker rm -f \$(docker ps -aq) || true"
                                sh "docker rmi -f \$(docker images -aq) || true"
                                println "Cleaned all Docker images and containers."
                            } else {
                                removeOldImages(backendTags, env.IMAGES_TO_KEEP.toInteger(), "backend")
                                removeOldImages(frontendTags, env.IMAGES_TO_KEEP.toInteger(), "frontend")
                            }

                        } catch (Exception e) {
                            println "Error during image cleanup: ${e.message}"
                        }
                    }
                }
            }
        }

    post {
        always {
            echo 'One way or another, I have finished'
            //deleteDir()
        }
        success {
            echo 'I succeeded :)'
        }
        unstable {
            echo 'I am unstable :/'
        }
        failure {
            echo 'I failed :('
        }
    }
}

def removeOldImages(imageTags, lastN, type) {
    if (imageTags) {
        def buildNumbers = imageTags.collect { tag ->
            try {

                def parts = tag.split(':')
                def tagWithoutRepo = parts[1]
                def part_numbers = tagWithoutRepo.split('-')
                def buildNumberPart = part_numbers[2]
                def buildNumber = buildNumberPart?.toInteger()
                [tag: tag, buildNumber: buildNumber]
            } catch (Exception e) {

                println "Error parsing tag: ${tag}, error: ${e.message}"
                [tag: tag, buildNumber: null]
            }
        }.findAll { it.buildNumber != null }

        def n = buildNumbers.size()
        for (int i = 0; i < n - 1; i++) {
            for (int j = 0; j < n - i - 1; j++) {
                if (buildNumbers[j].buildNumber > buildNumbers[j + 1].buildNumber) {
                    def temp = buildNumbers[j]
                    buildNumbers[j] = buildNumbers[j + 1]
                    buildNumbers[j + 1] = temp
                }
            }
        }

        def imagesToRemove = buildNumbers.take(buildNumbers.size() - lastN).collect { it.tag }

        if (imagesToRemove) {
            def command = "docker rmi -f ${imagesToRemove.join(' ')}"
            println "Docker remove command: ${command}"
            sh command
            println "Removed old ${type} images, keeping the last ${lastN}."
        } else {
            println "All ${type} images are among the last ${lastN} images."
        }
    } else {
        println "No ${type} images found."
    }
}
