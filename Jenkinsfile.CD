pipeline {
    agent any
    options {
        timeout(time: 1, unit: 'HOURS')
        timestamps()
        disableConcurrentBuilds()
        buildDiscarder(logRotator(numToKeepStr: '20', artifactNumToKeepStr: '10', daysToKeepStr: '30'))
    }
        parameters {
            string(name: 'GIT_COMMIT_SHORT', defaultValue: 'null', description: 'Git commit short')
            string(name: 'BUILD_NUMBER', defaultValue: 'null', description: 'Build number')
            booleanParam(name: 'FORCE_IMAGES', defaultValue: false, description: 'Force Images')
            string(name: 'BRANCH', defaultValue: 'master', description: 'Branch name')
        }
        environment {
            BUILD_NUMBER = "${params.BUILD_NUMBER}"
            GIT_COMMIT_SHORT = "${params.GIT_COMMIT_SHORT}"
            BUILD_STATUS = "CD"
            REPO_URL = "https://github.com/yismaili/ci-cd"
            BRANCH = "${params.BRANCH}"
            NEXUS_ARTEFACT_CREDENTIALS = 'nexus-credentials-id'
            GIT_CREDENTIALS_ID = 'github-pat'
            NEXUS_ARTEFACT_URL = '192.168.100.75:8585'
            REPOSITORY_FRONTEND = "${params.REPOSITORY_FRONTEND}"
            REPOSITORY_BACKEND = "${params.REPOSITORY_BACKEND}"
            IMAGES_TO_KEEP = "${params.IMAGES_TO_KEEP}"
            PRODUCTION_SERVER = 'root@192.168.100.76'
            DENTIALS_ID = 'production-ssh-credentials-id'
            WORKSPACE = "/var/lib/jenkins/workspace"
            BACKEND_IMAGES_INFO = "${WORKSPACE}/docker-images-info/backend-image.txt"
            FRONTEND_IMAGES_INFO = "${WORKSPACE}/docker-images-info/frontend-image.txt"
            ENV = "/var/lib/jenkins/workspace/env/"
            BACKEND_IMAGE_TAG = "backend-image"
            FRONTEND_IMAGE_TAG = "frontend-image"
            GIT_COMMIT_SHORT_INFO = "${WORKSPACE}/git-commit-short.txt"
            BUILD_NUMBER_INFO = "${WORKSPACE}/build-number.txt"
            GIT_COMMIT_SHORT_ = "git-commit-short"
            BUILD_NUMBER_ = "build-number"
            BACKEND_IMAGE_URL = "${NEXUS_ARTEFACT_URL}/ci-cd/backend:backend-"
            FRONTEND_IMAGE_URL = "${NEXUS_ARTEFACT_URL}/ci-cd/frontend:frontend-"
        }

        stages {

            stage('Setup') {
                when {
                    expression {params.FORCE_IMAGES}
                }
                steps {
                    script {
                        env.CUSTOMNAME = env.GIT_BRANCH.split("/")[1]
                        // env.APPNAME = sh(script: 'basename -s .git ${GIT_URL}', returnStdout: true).trim()
                        // targetFolderArray = env.GIT_BRANCH.split("/")
                        // targetFolder = targetFolderArray[targetFolderArray.size() - 1]
                        currentBuild.displayName = "${CUSTOMNAME}/${env.GIT_COMMIT_SHORT}-${env.BUILD_NUMBER}/CD" 
                    }
                }
            }

            stage('Capy Docker Images Info') {
                steps {
                    script {
                        def jobName = currentBuild.fullDisplayName.split(' ')[0]
                        sh """
                            cp ${env.BACKEND_IMAGES_INFO} ${WORKSPACE}/${jobName}/${env.BACKEND_IMAGE_TAG}.txt
                            cp ${env.FRONTEND_IMAGES_INFO} ${WORKSPACE}/${jobName}/${env.FRONTEND_IMAGE_TAG}.txt
                            cp ${env.ENV}/.env ${WORKSPACE}/${jobName}/.env
                            cp ${env.GIT_COMMIT_SHORT_INFO} ${WORKSPACE}/${jobName}/${env.GIT_COMMIT_SHORT_}.txt
                            cp ${env.BUILD_NUMBER_INFO} ${WORKSPACE}/${jobName}/${env.BUILD_NUMBER_}.txt

                            chown jenkins:jenkins ${WORKSPACE}/${jobName}/${env.BACKEND_IMAGE_TAG}.txt
                            chown jenkins:jenkins ${WORKSPACE}/${jobName}/${env.FRONTEND_IMAGE_TAG}.txt
                            chown jenkins:jenkins ${WORKSPACE}/${jobName}/${env.GIT_COMMIT_SHORT_}.txt
                            chown jenkins:jenkins ${WORKSPACE}/${jobName}/${env.BUILD_NUMBER_}.txt
                            chown jenkins:jenkins ${WORKSPACE}/${jobName}/.env
                        """
                        stash includes: "${env.BACKEND_IMAGE_TAG}.txt", name: "${env.BACKEND_IMAGE_TAG}"
                        stash includes: "${env.FRONTEND_IMAGE_TAG}.txt", name: "${env.FRONTEND_IMAGE_TAG}"
                        stash includes: "${env.GIT_COMMIT_SHORT_}.txt", name: "${env.GIT_COMMIT_SHORT_}"
                        stash includes: "${env.BUILD_NUMBER_}.txt", name: "${env.BUILD_NUMBER_}"
                    }
                }
            }

            stage('Retrieve Docker Image Info') {
                when {
                    expression {!params.FORCE_IMAGES}
                }
                steps {
                    script {
                        unstash "${env.FRONTEND_IMAGE_TAG}"
                        unstash "${env.BACKEND_IMAGE_TAG}"
                        unstash "${env.GIT_COMMIT_SHORT_}"
                        unstash "${env.BUILD_NUMBER_}"

                        def frontenddockerImageInfo = readFile("${env.FRONTEND_IMAGE_TAG}.txt").trim()
                        def backenddockerImageInfo = readFile("${env.BACKEND_IMAGE_TAG}.txt").trim()
                        def gitcommitshort = readFile("${env.GIT_COMMIT_SHORT_}.txt").trim()
                        def buildnumber = readFile("${env.BUILD_NUMBER_}.txt").trim()

                        env.FRONTEND_DOCKER_IMAGE = frontenddockerImageInfo
                        env.BACKEND_DOCKER_IMAGE = backenddockerImageInfo
                        env.GIT_COMMIT_SHORT = gitcommitshort
                        env.BUILD_NUMBER = buildnumber

                        env.CUSTOMNAME = env.GIT_BRANCH.split("/")[1]
                        currentBuild.displayName = "${CUSTOMNAME}/${gitcommitshort}-${buildnumber}/CD"
                    }
                }
            }

            stage('Preparing Docker compose file') {
                steps {
                    script {
                        if (params.FORCE_IMAGES) {
                            def frontenddockerimage = "${FRONTEND_IMAGE_URL}${GIT_COMMIT_SHORT_}${BUILD_NUMBER_}"
                            def backenddockerimage = "${BACKEND_IMAGE_URL}${GIT_COMMIT_SHORT_}${BUILD_NUMBER_}"
                            println "${frontenddockerimage} : ${backenddockerimage}"
                            sh """
                                sed -i "s|FRONTEND_IMAGE|${frontenddockerimage}|g" docker-compose.yml
                                sed -i "s|BACKEND_IMAGE|${backenddockerimage}|g" docker-compose.yml
                                cat docker-compose.yml
                            """
                        } else {
                            sh """
                                sed -i 's|FRONTEND_IMAGE|${env.FRONTEND_DOCKER_IMAGE}|g' docker-compose.yml
                                sed -i 's|BACKEND_IMAGE|${env.BACKEND_DOCKER_IMAGE}|g' docker-compose.yml
                            """
                        }
                    }
                }
            }

            stage('Test') {
                steps {
                    script {
                        sh 'echo ":/"'
                    }
                }
            }

            stage('Deploy to Production') {
                when {
                    expression { env.BUILD_STATUS == 'CD' }
                }
                steps {
                    script {
                        def jobName = currentBuild.fullDisplayName.split(' ')[0]
                        withCredentials([usernamePassword(credentialsId: 'nexus-credentials-id', usernameVariable: 'NEXUS_USERNAME', passwordVariable: 'NEXUS_PASSWORD')]) {
                            sshagent(credentials: ['production-ssh-credentials-id']) {
                                sh """
                                    ssh -o StrictHostKeyChecking=no ${PRODUCTION_SERVER} 'docker login ${NEXUS_ARTEFACT_URL} -u ${NEXUS_USERNAME} -p ${NEXUS_PASSWORD}'
                                """
                                
                                sh """
                                    ssh -o StrictHostKeyChecking=no ${PRODUCTION_SERVER} 'mkdir -p /home/prod'
                                    scp -o StrictHostKeyChecking=no ${WORKSPACE}/${jobName}/docker-compose.yml ${PRODUCTION_SERVER}:/home/prod/docker-compose.yml
                                    scp -o StrictHostKeyChecking=no ${WORKSPACE}/${jobName}/.env ${PRODUCTION_SERVER}:/home/prod/.env
                                """
                                
                                sh """
                                    ssh -o StrictHostKeyChecking=no ${PRODUCTION_SERVER} 'docker-compose -f /home/prod/docker-compose.yml down'
                                """
                                
                                sh """
                                    ssh -o StrictHostKeyChecking=no ${PRODUCTION_SERVER} 'docker-compose -f /home/prod/docker-compose.yml up -d'
                                """
                                
                                sh """
                                    ssh -o StrictHostKeyChecking=no ${PRODUCTION_SERVER} 'rm -rf /home/prod/.env'
                                """
                            }
                        }
                    }
                }
        }
    }

    post {
        always {
            echo 'One way or another, I have finished'
            deleteDir()
        }
        success {
            echo 'I succeeded :)'
        }
        unstable {
            echo 'I am unstable :/'
        }
        failure {
            echo 'I failed :('
        }
    }
}
