
pipeline {
    agent any
    options {
        timeout(time: 1, unit: 'HOURS')
        timestamps()
        disableConcurrentBuilds()
        buildDiscarder(logRotator(numToKeepStr: '20', artifactNumToKeepStr: '10', daysToKeepStr: '30'))
    }
     parameters {
        string(name: 'ITEMNAME', defaultValue: 'test2', description: 'Item name')
        string(name: 'BUILD_STATUS', defaultValue: 'CI', description: 'Build status')
        string(name: 'BRANCH', defaultValue: 'master', description: 'Branch name')
        string(name: 'NEXUS_ARTEFACT_CREDENTIALS', defaultValue: 'nexus-credentials-id', description: 'Nexus credentials ID')
        string(name: 'GIT_CREDENTIALS_ID', defaultValue: 'github-pat', description: 'Git credentials ID')
        string(name: 'NEXUS_ARTEFACT_URL', defaultValue: '192.168.100.75:8585', description: 'Nexus artifact URL')
        string(name: 'REPOSITORY_FRONTEND', defaultValue: 'ci-cd/frontend', description: 'Frontend repository')
        string(name: 'REPOSITORY_BACKEND', defaultValue: 'ci-cd/backend', description: 'Backend repository')
        string(name: 'IMAGES_TO_KEEP', defaultValue: '3', description: 'Number of Docker images to keep')
    }

    environment {
        GIT_COMMIT_SHORT = '16adef1'
        BUILD_NUMBER = '364'
        BUILD_STATUS = "CD"
        ITEMNAME = "${params.ITEMNAME}"
        REPO_URL = "https://github.com/yismaili/ci-cd"
        BRANCH = "${params.BRANCH}"
        NEXUS_ARTEFACT_CREDENTIALS = "${params.NEXUS_ARTEFACT_CREDENTIALS}"
        NEXUS_ARTEFACT_URL = "${params.NEXUS_ARTEFACT_URL}"
        GIT_CREDENTIALS_ID = "${params.GIT_CREDENTIALS_ID}"
        REPOSITORY_FRONTEND = "${params.REPOSITORY_FRONTEND}"
        REPOSITORY_BACKEND = "${params.REPOSITORY_BACKEND}"
        IMAGES_TO_KEEP = "${params.IMAGES_TO_KEEP}"
    }

        stages {
            stage('Setup') {
                steps {
                    script { 
                        sh '''
                            sudo cp /var/lib/jenkins/workspace/env/.env /var/lib/jenkins/workspace/env.ITEMNAME
                        '''
                    }
                }
            }
            stage('Pull Backend Image From Nexus') {
                steps {
                    script {
                        def nexusBackendTag = "${NEXUS_ARTEFACT_URL}/ci-cd/backend:backend-${env.GIT_COMMIT_SHORT}-${env.BUILD_NUMBER}"
                        withDockerRegistry([url: "http://${env.NEXUS_ARTEFACT_URL}", credentialsId: env.NEXUS_ARTEFACT_CREDENTIALS]) {
                            sh "docker pull ${nexusBackendTag}"
                        }
                        sh "echo END_IMAGE=${nexusBackendTag} >> .env"
                    }
                }
            }
            stage('Pull Frontend Image From Nexus') {
                steps {
                    script {
                        def nexusFrontendTag = "${NEXUS_ARTEFACT_URL}/ci-cd/frontend:frontend-${env.GIT_COMMIT_SHORT}-${env.BUILD_NUMBER}"
                        withDockerRegistry([url: "http://${env.NEXUS_ARTEFACT_URL}", credentialsId: env.NEXUS_ARTEFACT_CREDENTIALS]) {
                            sh "docker pull ${nexusFrontendTag}"
                        }
                        sh "echo END_IMAGE=${nexusFrontendTag} >> .env"
                    }
                }
            }
            stage('Test') {
                steps {
                    script {
                        sh 'echo ":/"'
                    }
                }
            }

            stage('Remove Unused Docker Images') {
                steps {
                    script {
                        try {
                            
                            def backendTags = sh(script: "docker images --format '{{.Repository}}:{{.Tag}}' | grep '${REPOSITORY_BACKEND}' || true", returnStdout: true).trim().split('\n').findAll { it }
                            def frontendTags = sh(script: "docker images --format '{{.Repository}}:{{.Tag}}' | grep '${REPOSITORY_FRONTEND}' || true", returnStdout: true).trim().split('\n').findAll { it }
                            
                            removeOldImages(backendTags, env.IMAGES_TO_KEEP, "backend")
                            removeOldImages(frontendTags, env.IMAGES_TO_KEEP, "frontend")

                        } catch (Exception e) {
                            println "Error during image cleanup: ${e.message}"
                        }
                    }
                }
            }

            stage('Deployment') {
                steps {
                    script {
                        if (env.BUILD_STATUS == 'CD') {
                            sh 'docker-compose build'
                            sh 'docker-compose up -d'
                        }
                    }
                }
            }


            // stage('Deployment') {
            //     steps {
            //         script {
            //             if (env.BUILD_STATUS == 'CD') {
            //                 sh 'ansible-playbook -i inventory.yml deploy.yaml'
            //             }
            //         }
            //     }
            // }
        }

    post {
        always {
            echo 'One way or another, I have finished'
            deleteDir()
        }
        success {
            echo 'I succeeded :)'
        }
        unstable {
            echo 'I am unstable :/'
        }
        failure {
            echo 'I failed :('
        }
    }
}

def removeOldImages(imageTags, lastN, type) {
    if (imageTags) {
       // Split build numbers from image tags
        def buildNumbers = imageTags.collect { tag ->
            try {
                def parts = tag.split(':')
                //println "Tag parts: ${parts}"
                def tagWithoutRepo = parts[1]
                //println "Tag without repo: ${tagWithoutRepo}"
                def part_numbers = tagWithoutRepo.split('-')
                def buildNumberPart = part_numbers[2]
                //println "Build number part: ${buildNumberPart}"
                def buildNumber = buildNumberPart?.toInteger()
               // println "Build number: ${buildNumber}"
                [tag: tag, buildNumber: buildNumber]
            } catch (Exception e) {
                println "Error parsing tag: ${tag}, error: ${e.message}"
                [tag: tag, buildNumber: null]
            }
        }.findAll { it.buildNumber != null }
       // println "Build numbers list: ${buildNumbers}"

        //  sort the build numbers by order
        def n = buildNumbers.size()
        for (int i = 0; i < n - 1; i++) {
            for (int j = 0; j < n - i - 1; j++) {
                if (buildNumbers[j].buildNumber > buildNumbers[j + 1].buildNumber) {
                    def temp = buildNumbers[j]
                    buildNumbers[j] = buildNumbers[j + 1]
                    buildNumbers[j + 1] = temp
                }
            }
        }
        //println "Sorted build numbers: ${buildNumbers}"
        // Determine images to remove
        def imagesToRemove = buildNumbers.take(buildNumbers.size() - lastN).collect { it.tag }

        //println "Images to remove: ${imagesToRemove}"

        if (imagesToRemove) {
            def command = "docker rmi -f ${imagesToRemove.join(' ')}"
            println "Docker remove command: ${command}"
            sh command
            println "Removed old ${type} images, keeping the last ${lastN}."
        } else {
            println "All ${type} images are among the last ${lastN} images."
        }
    } else {
        println "No ${type} images found."
    }
}
